{{- define "teable.dictToQueryString" -}}
    {{- if (eq (typeOf .) "string") -}}
        {{- . -}}
    {{- else -}}
        {{- $first := true -}}
        {{ range $key, $value := . -}}
          {{- if $first -}}
            {{- $first = false -}}
          {{- else -}}
            &
          {{- end -}}
          {{- $key | urlquery }}={{ $value | urlquery -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{- define "teable.safe_url" -}}
{{- urlJoin (
    dict
        "scheme" .scheme
        "userinfo" (printf "%s:%s" (urlquery .user)  (urlquery .password) )
        "host" (printf "%s:%s" .host (.port | print))
        "name" (printf "/%s" .path)
        "query" (include "teable.dictToQueryString" (.query | default (dict)))
    )
-}}
{{- end -}}

{{- $postgres:= include "common.nameBuilder" (list $ "postgresql") }}
{{- $redis:= include "common.nameBuilder" (list $ "redis-master") }}
{{- $defaultDbPassword := .Values.postgresql.auth.password | default (randAlphaNum 32) }}
{{- $defaultRedisPassword := .Values.redis.auth.password | default (randAlphaNum 32) }}
{{- $defaultMinioPassword := .Values.minio.auth.password | default (randAlphaNum 32) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "teable.secretName" . }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
  labels:
    {{- include "common.labels" . | nindent 4 }}
type: Opaque
stringData:
  jwt-secret: {{ .Values.config.jwtSecret | default (randAlphaNum 64) | quote }}
  session-secret: {{ .Values.config.jwtSecret | default (randAlphaNum 64) | quote }}
  accessToken-encryption-key: {{ .Values.config.accessToken.key | default (randAlphaNum 16) | quote }}
  accessToken-encryption-iv: {{ .Values.config.accessToken.iv | default (randAlphaNum 16) | quote }}
  database-password: {{ $defaultDbPassword | quote }}
  redis-password: {{ $defaultRedisPassword | quote }}
  minio-user: admin
  minio-password: {{ $defaultMinioPassword | quote }}
  {{- if .Values.ingress.services.minio }}
  minio-url: "{{- if .Values.ingress.tls -}}https{{- else -}}http{{- end }}://{{ .Values.ingress.services.minio.host }}{{- if .Values.ingress.services.minio.path -}}{{ .Values.ingress.services.minio.path }}{{- end }}"
  {{- end }}
  {{- if .Values.minio.apiIngress }}
  minio-url: "{{- if .Values.ingress.tls -}}https{{- else -}}http{{- end }}://{{ .Values.minio.apiIngress.hostname }}{{- if .Values.minio.apiIngress.path -}}{{ .Values.minio.apiIngress.path }}{{- end }}"
  {{- end }}
  database-url: {{ printf "postgresql://%s:%s@%s:%s/%s" .Values.postgresql.auth.username $defaultDbPassword $postgres (toString .Values.postgresql.primary.service.ports.postgresql) .Values.postgresql.auth.database | quote }}
  # BACKEND_CACHE_REDIS_URI=redis://default:${POSTGRES_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}
  redis-url: {{ printf "redis://default:%s@%s:%s/%s" $defaultRedisPassword $redis (toString .Values.redis.master.service.ports.redis) (toString .Values.config.redisDb) | quote }}
  {{- if .Values.config.mail.host }}
  mail-auth-password: {{ .Values.config.mail.auth.password | quote }}
  {{- end }}
