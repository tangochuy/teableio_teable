generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgres"
  url      = env("PRISMA_DATABASE_URL")
}

model Space {
  id               String    @id @default(cuid())
  name             String
  credit           Int?
  deletedTime      DateTime? @map("deleted_time")
  createdTime      DateTime  @default(now()) @map("created_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")

  baseGroup      Base[]

  @@map("space")
}

model Base {
  id               String      @id @default(cuid())
  spaceId          String      @map("space_id")
  name             String
  order            Float
  icon             String?
  schemaPass       String?     @map("schema_pass")
  deletedTime      DateTime?   @map("deleted_time")
  createdTime      DateTime    @default(now()) @map("created_time")
  createdBy        String      @map("created_by")
  lastModifiedBy   String?     @map("last_modified_by")
  lastModifiedTime DateTime?   @updatedAt @map("last_modified_time")

  space          Space       @relation(fields: [spaceId], references: [id])
  tables         TableMeta[]

  @@index([order])
  @@map("base")
}

model TableMeta {
  id               String    @id
  baseId           String    @map("base_id")
  name             String
  description      String?
  icon             String?
  dbTableName      String    @map("db_table_name")
  version          Int
  order            Float
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  deletedTime      DateTime? @map("deleted_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")
  base             Base      @relation(fields: [baseId], references: [id])
  fields           Field[]
  views            View[]

  @@index([order])
  @@map("table_meta")
}

model Field {
  id                  String    @id
  name                String
  description         String?
  options             String?
  type                String
  cellValueType       String    @map("cell_value_type")
  isMultipleCellValue Boolean?  @map("is_multiple_cell_value")
  dbFieldType         String    @map("db_field_type")
  dbFieldName         String    @map("db_field_name")
  notNull             Boolean?  @map("not_null")
  unique              Boolean?
  isPrimary           Boolean?  @map("is_primary")
  isComputed          Boolean?  @map("is_computed")
  isLookup            Boolean?  @map("is_lookup")
  isPending           Boolean?  @map("is_pending")
  hasError            Boolean?  @map("has_error")
  // the link field id that a lookup field is linked to
  lookupLinkedFieldId String?   @map("lookup_linked_field_id")
  lookupOptions       String?   @map("lookup_options")
  tableId             String    @map("table_id")
  version             Int
  createdTime         DateTime  @default(now()) @map("created_time")
  lastModifiedTime    DateTime? @updatedAt @map("last_modified_time")
  deletedTime         DateTime? @map("deleted_time")
  createdBy           String    @map("created_by")
  lastModifiedBy      String?   @map("last_modified_by")
  table               TableMeta @relation(fields: [tableId], references: [id])

  @@index([lookupLinkedFieldId])
  @@map("field")
}

model View {
  id               String    @id
  name             String
  description      String?
  tableId          String    @map("table_id")
  type             String
  sort             String?
  filter           String?
  group            String?
  options          String?
  order            Float
  version          Int
  columnMeta       String    @map("column_meta")
  enableShare      Boolean?  @map("enable_share")
  shareId          String?   @map("share_id")
  shareMeta        String?   @map("share_meta")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  deletedTime      DateTime? @map("deleted_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")
  table            TableMeta @relation(fields: [tableId], references: [id])

  @@index([order])
  @@map("view")
}

model Ops {
  collection  String
  docId       String   @map("doc_id")
  docType     String   @map("doc_type")
  version     Int
  operation   String
  createdTime DateTime @default(now()) @map("created_time")
  createdBy   String   @map("created_by")

  @@unique([collection, docId, version])
  @@index([collection, createdTime])
  @@map("ops")
}

model Snapshots {
  collection String
  docId      String @map("doc_id")
  docType    String @map("doc_type")
  version    Int
  data       String

  @@unique([collection, docId])
  @@map("snapshots")
}

model Reference {
  id          String @id @default(cuid())
  fromFieldId String @map("from_field_id")
  toFieldId   String @map("to_field_id")
  createdTime DateTime @default(now()) @map("created_time")

  @@unique([toFieldId, fromFieldId])
  @@index([fromFieldId])
  @@index([toFieldId])
  @@map("reference")
}

model User {
  id               String    @id @default(cuid())
  name             String
  password         String?
  salt             String?
  phone            String?   @unique
  email            String    @unique
  avatar           String?
  notifyMeta       String?   @map("notify_meta")
  lastSignTime     DateTime? @map("last_sign_time")
  createdTime      DateTime  @default(now()) @map("created_time")
  deletedTime      DateTime? @map("deleted_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")

  accounts         Account[]
  @@map("users")
}

model Account {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  type             String
  provider         String
  providerId       String    @map("provider_id")
  createdTime      DateTime  @default(now()) @map("created_time")

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("account")
}

model Attachments {
  id             String    @id @default(cuid())
  bucket         String
  token          String    @unique
  hash           String
  size           Int
  mimetype       String
  path           String
  width          Int?
  height         Int?
  deletedTime    DateTime? @map("deleted_time")
  createdTime    DateTime  @default(now()) @map("created_time")
  createdBy      String    @map("created_by")
  lastModifiedBy String?   @map("last_modified_by")

  @@map("attachments")
}

model AttachmentsTable {
  id               String    @id @default(cuid())
  attachmentId     String    @map("attachment_id")
  name             String
  token            String
  tableId          String    @map("table_id")
  recordId         String    @map("record_id")
  fieldId          String    @map("field_id")
  createdTime      DateTime  @default(now()) @map("created_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")

  @@map("attachments_table")
}

model AutomationWorkflow {
  id               String    @id @default(cuid())
  workflowId       String    @unique @map("workflow_id")
  name             String    @map("name")
  description      String?   @map("description")
  deploymentStatus String    @default("undeployed") @map("deployment_status")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  deletedTime      DateTime? @map("deleted_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")

  @@map("automation_workflow")
}

model AutomationWorkflowTrigger {
  id               String    @id @default(cuid())
  triggerId        String    @unique @map("trigger_id")
  workflowId       String    @map("workflow_id")
  description      String?   @map("description")
  triggerType      String?   @map("trigger_type")
  inputExpressions String?   @map("input_expressions")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  deletedTime      DateTime? @map("deleted_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")

  @@index([workflowId])
  @@map("automation_workflow_trigger")
}

model AutomationWorkflowAction {
  id               String    @id @default(cuid())
  actionId         String    @unique @map("action_id")
  workflowId       String    @map("workflow_id")
  description      String?   @map("description")
  actionType       String?   @map("action_type")
  inputExpressions String?   @map("input_expressions")
  nextNodeId       String?   @map("next_node_id")
  parentNodeId     String?   @map("parent_node_id")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  deletedTime      DateTime? @map("deleted_time")
  createdBy        String    @map("created_by")
  lastModifiedBy   String?   @map("last_modified_by")

  @@index([workflowId])
  @@map("automation_workflow_action")
}

model AutomationWorkflowExecutionHistory {
  id              String   @id @default(cuid())
  workflowId      String   @map("workflow_id")
  executionType   String   @map("execution_type")
  executionResult String   @map("execution_result")
  createdTime     DateTime @default(now()) @map("created_time")

  @@index([workflowId])
  @@map("automation_workflow_execution_history")
}

model Collaborator {
  id               String    @id @default(cuid())
  roleName         String    @map("role_name")
  baseId           String?   @map("base_id")
  spaceId          String?   @map("space_id")
  userId           String    @map("user_id")
  deletedTime      DateTime? @map("deleted_time")
  createdBy        String    @map("created_by")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  lastModifiedBy   String?   @map("last_modified_by")

  @@map("collaborator")
}

model Invitation {
  id               String    @id @default(cuid())
  baseId           String?   @map("base_id")
  spaceId          String?   @map("space_id")
  type             String    @map("type")
  role             String
  invitationCode   String    @map("invitation_code")
  expiredTime      DateTime? @map("expired_time")
  createdBy        String    @map("create_by")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")
  lastModifiedBy   String?   @map("last_modified_by")
  deletedTime      DateTime? @map("deleted_time")

  @@map("invitation")
}

model InvitationRecord {
  id           String   @id @default(cuid())
  invitationId String   @map("invitation_id")
  baseId       String?  @map("base_id")
  spaceId      String?  @map("space_id")
  type         String   @map("type")
  inviter      String   @map("inviter")
  accepter     String   @map("accepter")
  createdTime  DateTime @default(now()) @map("created_time")

  @@map("invitation_record")
}

model Notification {
  id          String   @id @default(cuid())
  fromUser    String?  @map("from_user") @ignore
  toUser      String?  @map("to_user") @ignore
  fromUserId  String   @map("from_user_id")
  toUserId    String   @map("to_user_id")
  type        String   @map("type")
  message     String   @map("message")
  urlMeta     String?  @map("url_meta")
  isRead      Boolean  @default(false) @map("is_read")
  createdTime DateTime @default(now()) @map("created_time")
  createdBy   String   @map("created_by")

  @@index([toUserId, isRead, createdTime])
  @@map("notification")
}

model AccessToken {
  id               String    @id @default(cuid())
  name             String
  description      String?
  userId           String    @map("user_id")
  scopes           String
  spaceIds         String?   @map("space_ids")
  baseIds          String?   @map("base_ids")
  sign             String
  expiredTime      DateTime  @map("expired_time")
  lastUsedTime     DateTime? @map("last_used_time")
  createdTime      DateTime  @default(now()) @map("created_time")
  lastModifiedTime DateTime? @updatedAt @map("last_modified_time")

  @@map("access_token")
}