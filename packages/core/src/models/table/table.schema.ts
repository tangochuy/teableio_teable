import { z } from 'zod';
import { IdPrefix } from '../../utils';
import { fieldRoSchema, fieldVoSchema } from '../field';
import { createRecordsRoSchema, fieldKeyTypeRoSchema, recordSchema } from '../record';
import { viewRoSchema, viewVoSchema } from '../view';

export const fullTableVoSchema = z
  .object({
    id: z.string().startsWith(IdPrefix.Table).openapi({
      description: 'The id of table.',
    }),
    name: z.string(),
    description: z.string().optional().openapi({
      description: 'The description of the table.',
    }),
    icon: z.string().emoji().optional().openapi({
      description: 'The emoji icon string of the table.',
    }),
    fields: fieldVoSchema.array().openapi({
      description: 'The fields of the table.',
    }),
    views: viewVoSchema.array().openapi({
      description: 'The views of the table.',
    }),
    records: recordSchema.array().openapi({
      description: 'The records of the table.',
    }),
    total: z.number().openapi({
      description: 'Total number of records in this query.',
    }),
    order: z.number().openapi({
      description: 'The order is a floating number, table will sort by it in the folder.',
    }),
  })
  .openapi({
    description: 'Complete table structure data and initial record data.',
  });

export type ITableFullVo = z.infer<typeof fullTableVoSchema>;

export const tableVoSchema = fullTableVoSchema.partial({
  fields: true,
  views: true,
  records: true,
  total: true,
});

export type ITableVo = z.infer<typeof tableVoSchema>;

export const tableRoSchema = fullTableVoSchema
  .omit({
    id: true,
    total: true,
  })
  .partial({
    name: true,
    order: true,
  })
  .merge(
    z.object({
      fieldKeyType: fieldKeyTypeRoSchema,
      fields: fieldRoSchema.array().optional().openapi({
        description:
          'The fields of the table. If it is empty, 3 fields include SingleLineText, Number, SingleSelect will be generated by default.',
      }),
      views: viewRoSchema.array().optional().openapi({
        description:
          'The views of the table. If it is empty, a grid view will be generated by default.',
      }),
      records: createRecordsRoSchema.shape.records.optional().openapi({
        description:
          'The record data of the table. If it is empty, 3 empty records will be generated by default.',
      }),
      order: z.number().optional().openapi({
        description:
          'The order is a floating number, table will sort by it in the folder. If it is empty, table will be put to the last one.',
      }),
    })
  )
  .openapi({
    description: 'params for create a table',
  });

export type ICreateTableRo = z.infer<typeof tableRoSchema>;

export const tableListVoSchema = tableVoSchema.array().openapi({
  description: 'The list of tables.',
});

export type ITableListVo = z.infer<typeof tableListVoSchema>;

export const getTableQuerySchema = z.object({
  viewId: z.string().startsWith(IdPrefix.View).optional().openapi({
    description: 'The id of view.',
  }),
  includeContent: z
    .string()
    .or(z.boolean())
    .transform(Boolean)
    .pipe(z.boolean())
    .optional()
    .openapi({
      description:
        'If true return table content. including fields, views, first 50 records and total count of records.',
    }),
  fieldKeyType: fieldKeyTypeRoSchema,
});

export type IGetTableQuery = z.infer<typeof getTableQuerySchema>;
